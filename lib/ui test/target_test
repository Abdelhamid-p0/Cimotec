import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';

class TrainingModePage extends StatefulWidget {
  const TrainingModePage({Key? key}) : super(key: key);

  @override
  State<TrainingModePage> createState() => _TrainingModePageState();
}

class _TrainingModePageState extends State<TrainingModePage> {
  String selectedMode = 'Entraînement libre';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Background SVG
          SvgPicture.asset(
            '../../assets/3.svg',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          
          // Main content
          Center(
            child: Container(
              padding: const EdgeInsets.all(24),
              width: 600,
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.4),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Text(
                    'Mode d\'Entraînement',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                  
                  const SizedBox(height: 32),
                  
                  // Target image
                  SvgPicture.string(
                    '''
                    <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
                      <circle cx="100" cy="100" r="90" stroke="black" stroke-width="5" fill="white"/>
                      <circle cx="100" cy="100" r="60" stroke="black" stroke-width="5" fill="white"/>
                      <circle cx="100" cy="100" r="30" stroke="black" stroke-width="5" fill="white"/>
                      <circle cx="100" cy="100" r="10" stroke="black" stroke-width="5" fill="black"/>
                    </svg>
                    ''',
                    width: 180,
                    height: 180,
                  ),
                  
                  const SizedBox(height: 32),
                  
                  // Training mode selection
                  _buildModeSelection('Entraînement libre'),
                  _buildModeSelection('Entraînement dirigé par officier de tir'),
                  _buildModeSelection('Entraînement compétition'),
                  
                  const SizedBox(height: 24),
                  
                  // Display selected mode characteristics
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.white.withOpacity(0.3)),
                    ),
                    child: _buildModeCharacteristics(),
                  ),
                  
                  const SizedBox(height: 32),
                  
                  // START button
                  ElevatedButton.icon(
                    onPressed: () {},
                    icon: const Icon(Icons.play_arrow),
                    label: const Text('START'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                      textStyle: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(24),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModeSelection(String mode) {
    final isSelected = selectedMode == mode;
    
    return InkWell(
      onTap: () {
        setState(() {
          selectedMode = mode;
        });
      },
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
        margin: const EdgeInsets.only(bottom: 8),
        decoration: BoxDecoration(
          color: isSelected ? Colors.white.withOpacity(0.2) : Colors.transparent,
          borderRadius: BorderRadius.circular(4),
          border: Border.all(
            color: isSelected ? Colors.white : Colors.white.withOpacity(0.3),
            width: isSelected ? 2 : 1,
          ),
        ),
        child: Row(
          children: [
            Radio<String>(
              value: mode,
              groupValue: selectedMode,
              onChanged: (value) {
                setState(() {
                  selectedMode = value!;
                });
              },
              fillColor: MaterialStateProperty.resolveWith(
                (states) => Colors.white,
              ),
            ),
            Text(
              mode,
              style: TextStyle(
                color: Colors.white,
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                fontSize: 16,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildModeCharacteristics() {
    switch (selectedMode) {
      case 'Entraînement libre':
        return const Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Entraînement libre',
              style: TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
            ),
            SizedBox(height: 12),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                _CharacteristicItem(label: 'Sans limite', value: 'temps'),
                _CharacteristicItem(label: 'Illimité', value: 'de coups'),
                _CharacteristicItem(label: 'Sans', value: 'séries'),
              ],
            ),
          ],
        );
      
      case 'Entraînement dirigé par officier de tir':
        return const Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Entraînement dirigé',
              style: TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
            ),
            SizedBox(height: 12),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                _CharacteristicItem(label: '1:00', value: 'une minute'),
                _CharacteristicItem(label: '10 coups', value: '(selon l\'arme)'),
                _CharacteristicItem(label: '2', value: 'séries'),
              ],
            ),
          ],
        );
      
      case 'Entraînement compétition':
        return const Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Entraînement compétition',
              style: TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
            ),
            SizedBox(height: 12),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                _CharacteristicItem(label: '0:30', value: '30 secondes'),
                _CharacteristicItem(label: 'Nombre de coups', value: '(selon l\'arme)'),
                _CharacteristicItem(label: '1', value: 'série'),
              ],
            ),
          ],
        );
      
      default:
        return const SizedBox.shrink();
    }
  }
}

class _CharacteristicItem extends StatelessWidget {
  final String label;
  final String value;
  
  const _CharacteristicItem({
    required this.label,
    required this.value,
  });
  
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text(
          label,
          style: const TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 16,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            color: Colors.white70,
            fontSize: 14,
          ),
        ),
      ],
    );
  }
}